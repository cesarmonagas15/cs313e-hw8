"""
Student information for this assignment:

Replace Cesar Monagas with your name.
On my/our honor, Cesar Monagas, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: cam9225
"""

# the constant used to calculate the step size
STEP_SIZE_CONSTANT = 3


# DO NOT modify this function.
def is_prime(n):
    """
    Determines if a number is prime.

    pre: n is a positive integer.
    post: Returns True if n is prime, otherwise returns False.
    """
    if n == 1:
        return False

    limit = int(n**0.5) + 1
    div = 2
    while div < limit:
        if n % div == 0:
            return False
        div += 1
    return True


# DO NOT modify this function.
def hash_word(s, size):
    """
    Hashes a lowercase string to an index in a hash table.

    pre: s is a lowercase string, and size is a positive integer representing either
         hash table size or the constant for double hashing.
    post: Returns an integer index in the range [0, size - 1] where the string hashes to.
    """
    hash_idx = 0
    for c in s:
        letter = ord(c) - 96
        hash_idx = (hash_idx * 26 + letter) % size
    return hash_idx


def step_size(s):
    """
    Calculates step size for double hashing using STEP_SIZE_CONSTANT.

    pre: s is a lowercase string.
    post: Returns the calculated step size as an integer based on the provided string.
    """
    return STEP_SIZE_CONSTANT - (hash_word(s, STEP_SIZE_CONSTANT) % STEP_SIZE_CONSTANT)


def insert_word(s, hash_table):
    """
    Inserts a string into the hash table using double hashing for collision resolution.
    No duplicates are allowed.

    pre: s is a string, and hash_table is a list representing the hash table.
    post: Inserts s into hash_table at the correct index; resolves any collisions
          by double hashing.
    """
    if find_word(s, hash_table):
        return
    size = len(hash_table)
    initial_hash = hash_word(s, size)
    step = step_size(s)
    i = 0
    while i < size:
        index = (initial_hash + i * step) % size
        if hash_table[index] == "":
            hash_table[index] = s
            return
        i += 1


def find_word(s, hash_table):
    """
    Searches for a string in the hash table.
    Note: using the `in` operator is incorrect as that will be O(N). We want
          an O(1) time average time complexity using hashing.

    pre: s is a string, and hash_table is a list representing the hash table.
    post: Returns True if s is found in hash_table, otherwise returns False.
    """
    size = len(hash_table)
    initial_hash = hash_word(s, size)
    step = step_size(s)
    i = 0
    while i < size:
        index = (initial_hash + i * step) % size
        if hash_table[index] == s:
            return True
        if hash_table[index] == "":
            return False
        i += 1
    return False


def is_reducible(s, hash_table, hash_memo):
    """
    Determines if a string is reducible using a recursive check.

    pre: s is a lowercase string, hash_table is a list representing the hash table,
         and hash_memo is a list representing the hash table for memoization.
    post: Returns True if s is reducible (also updates hash_memo by
          inserting s if reducible), otherwise returns False.
    """
    if len(s) == 0:
        return False
    if len(s) == 1:
        return s == 'a' or s == 'i' or s == 'o'
    if find_word(s, hash_memo):
        return True
    for i in range(len(s)):
        new_word = s[:i] + s[i+1:]
        if find_word(new_word, hash_table):
            if is_reducible(new_word, hash_table, hash_memo):
                insert_word(s, hash_memo)
                return True
    return False


def get_longest_words(string_list):
    """
    Finds longest words from a list.

    pre: string_list is a list of lowercase strings.
    post: Returns a list of words in string_list that have the maximum length.
    """
    if not string_list:
        return []
    max_length = len(max(string_list, key=len))
    return [word for word in string_list if len(word) == max_length]


def main():
    """The main function that calculates the longest reducible words"""
    word_list = []
    try:
        while True:
            word = input().strip()
            word_list.append(word)
    except EOFError:
        pass
    n = len(word_list)
    # determine prime number N
    N = 2 * n
    while not is_prime(N):
        N += 1
    hash_list = [""] * N
    for word in word_list:
        insert_word(word, hash_list)
    # create hash_memo
    M = int(0.2 * n)
    while not is_prime(M):
        M += 1
    hash_memo = [""] * M

    reducible_words = []
    for word in word_list:
        if is_reducible(word, hash_list, hash_memo):
            reducible_words.append(word)
    longest_words = get_longest_words(reducible_words)
    for word in sorted(longest_words):
        print(word)


if __name__ == "__main__":
    main()
